#!/bin/bash

export AWS_HELPERS_DIR="$HOME/.aws/.aws_helpers"

# @source - https://github.com/antonbabenko/awsp

function _awsListAll() {
    local credentialFileLocation="${AWS_SHARED_CREDENTIALS_FILE:-$HOME/.aws/credentials}"
    if [[ ! -f "$credentialFileLocation" ]]; then
        echo "Error: Credentials file not found at $credentialFileLocation"
        return 1
    fi
    grep -E '^\[.*\]' "$credentialFileLocation"
}
function _awsListProfile() {
    local profileFileLocation="${AWS_CONFIG_FILE:-$HOME/.aws/config}"
    if [[ ! -f "$profileFileLocation" ]]; then
        echo "Error: Config file not found at $profileFileLocation"
        return 1
    fi
    grep -E '^\[.*\]' "$profileFileLocation"
}

function _awsListProfile() {
	# if AWS_CONFIG_FILE is unset, default to $HOME/.aws/config
	local profileFileLocation
	profileFileLocation="$(env | grep AWS_CONFIG_FILE | cut -d= -f2)"
	if [ -z "$profileFileLocation" ]; then
		profileFileLocation="$HOME/.aws/config"
	fi
	while read -r line; do
		if [[ $line == "["* ]]; then
			echo "$line"
		fi
	done <"$profileFileLocation"
}

# switch profile by setting all env vars
function _awsSwitchProfile() {
    # check that AWS CLI is installed
    if ! command -v aws &>/dev/null; then
        echo "Error: The AWS CLI is not installed or not found in your PATH."
        return 1
    fi

    if [ -z "$1" ]; then
        echo "Usage: awssp <profile>"
        return 1
    fi

    local profileToUse="$1"
    local exists role_arn mfa_serial source_profile JSON

    # get profile information
    exists=$(aws configure get aws_access_key_id --profile "$profileToUse" 2>/dev/null)
    role_arn=$(aws configure get role_arn --profile "$profileToUse" 2>/dev/null)

    if [[ -z "$exists" && -z "$role_arn" ]]; then
        echo "Profile '$profileToUse' not found or missing credentials."
        return 1
    fi

    # check if jq is installed early for better user experience
    local use_jq="true"
    if ! command -v jq &>/dev/null; then
        echo "Warning: 'jq' not found; using AWS CLI --query approach instead."
        use_jq="false"
    fi

    # colorized output
    local GREEN='\033[0;32m'
    local YELLOW='\033[0;33m'
    local RED='\033[0;31m'
    local NC='\033[0m' # no color

    if [[ -n "$role_arn" ]]; then
        mfa_serial=$(aws configure get mfa_serial --profile "$profileToUse" 2>/dev/null)
        source_profile=$(aws configure get source_profile --profile "$profileToUse" 2>/dev/null)

        local effectiveProfile="${source_profile:-$profileToUse}"
        
        local mfa_token=""
        if [[ -n "$mfa_serial" ]]; then
            echo -n -e "${YELLOW}Enter MFA token for $mfa_serial: ${NC}"
            read -r mfa_token
        fi

        echo -e "${YELLOW}Assuming role $role_arn using profile $effectiveProfile...${NC}"

        # combined logic for both jq and non-jq paths
        local cmd_args=(--profile="$effectiveProfile" --role-arn "$role_arn" --role-session-name "$USER-$(date +%s)")
        
        if [[ -n "$mfa_serial" && -n "$mfa_token" ]]; then
            cmd_args+=(--serial-number "$mfa_serial" --token-code "$mfa_token")
        fi

        if [[ "$use_jq" == "true" ]]; then
            JSON=$(aws sts assume-role "${cmd_args[@]}" 2>/dev/null)
            
            if [[ -z "$JSON" ]]; then
                echo -e "${RED}Error: Failed to assume role. Check your permissions or MFA input.${NC}"
                return 1
            fi

            export AWS_ACCESS_KEY_ID="$(echo "$JSON" | jq -r '.Credentials.AccessKeyId')"
            export AWS_SECRET_ACCESS_KEY="$(echo "$JSON" | jq -r '.Credentials.SecretAccessKey')"
            export AWS_SESSION_TOKEN="$(echo "$JSON" | jq -r '.Credentials.SessionToken')"
            
            # display expiration time
            local expiration
            expiration=$(echo "$JSON" | jq -r '.Credentials.Expiration')
            echo -e "${YELLOW}Temporary credentials will expire at: $expiration${NC}"
        else
            local readOutput
            readOutput=$(aws sts assume-role "${cmd_args[@]}" --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken,Expiration]' --output text 2>/dev/null)
            
            if [[ -z "$readOutput" ]]; then
                echo -e "${RED}Error: Failed to assume role. Check your permissions or MFA input.${NC}"
                return 1
            fi

            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN EXPIRATION <<< "$readOutput"
            
            export AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY
            export AWS_SESSION_TOKEN
            
            # display expiration time
            echo -e "${YELLOW}Temporary credentials will expire at: $EXPIRATION${NC}"
        fi
    else
        # standard credential approach (no role to assume)
        export AWS_ACCESS_KEY_ID="$(aws configure get aws_access_key_id --profile "$profileToUse" 2>/dev/null)"
        export AWS_SECRET_ACCESS_KEY="$(aws configure get aws_secret_access_key --profile "$profileToUse" 2>/dev/null)"
        unset AWS_SESSION_TOKEN
    fi

    export AWS_DEFAULT_PROFILE="$profileToUse"
    export AWS_PROFILE="$profileToUse"
    
    # set region if available
    local region
    region=$(aws configure get region --profile "$profileToUse" 2>/dev/null)
    if [[ -n "$region" ]]; then
        export AWS_DEFAULT_REGION="$region"
        export AWS_REGION="$region"
        echo -e "${GREEN}Using region: $region${NC}"
    fi
    
    # improved output with color
    echo -e "${GREEN}Switched to AWS Profile: $profileToUse${NC}"
    aws configure list
}

function _awsSetProfile() {
    if [ -z "$1" ]; then
        echo "Usage: awsset <profile>"
        return 1
    fi
    
    local profileToSet="$1"
    # more efficient check using grep directly on output
    if ! aws configure list-profiles 2>/dev/null | grep -q "^$profileToSet\$"; then
        echo "Error: Profile '$profileToSet' does not exist in your AWS config/credentials."
        return 1
    fi
    
    export AWS_DEFAULT_PROFILE="$profileToSet"
    export AWS_PROFILE="$profileToSet"
    
    # set region if available
    local region
    region=$(aws configure get region --profile "$profileToSet" 2>/dev/null)
    if [[ -n "$region" ]]; then
        export AWS_DEFAULT_REGION="$region"
        export AWS_REGION="$region"
        echo "Using region: $region"
    fi
    
    echo "Switched to AWS Profile: $profileToSet"
    echo "Environment variables with credentials were not set. (Using 'aws configure list' or 'aws-vault' is recommended.)"
    echo "Sample commands to run:"
    echo "$ aws-vault exec $profileToSet -- aws s3 ls"
    echo "$ aws s3 ls   <-- uses AWS_PROFILE=$profileToSet"
}

function _awsStatus() {
    local GREEN='\033[0;32m'
    local YELLOW='\033[0;33m'
    local RED='\033[0;31m'
    local BLUE='\033[0;34m'
    local NC='\033[0m' # no color
    
    echo -e "${BLUE}=== AWS Profile Status ===${NC}"
    
    # current profile
    local current_profile="${AWS_PROFILE:-${AWS_DEFAULT_PROFILE:-None}}"
    echo -e "${GREEN}Current Profile: $current_profile${NC}"
    
    # region
    local region="${AWS_REGION:-${AWS_DEFAULT_REGION:-None}}"
    echo -e "${GREEN}Current Region: $region${NC}"
    
    # check for credentials
    if [[ -n "$AWS_ACCESS_KEY_ID" ]]; then
        echo -e "${GREEN}Credentials: Active${NC}"
        
        # display temporary credential status
        if [[ -n "$AWS_SESSION_TOKEN" ]]; then
            echo -e "${YELLOW}Status: Using temporary credentials${NC}"
            
            # get fresh session info if possible
            if [[ -n "$current_profile" && "$current_profile" != "None" ]]; then
                echo -e "${YELLOW}To check expiration time, use: aws sts get-caller-identity${NC}"
            fi
        else
            echo -e "${GREEN}Status: Using permanent credentials${NC}"
        fi
    else
        echo -e "${YELLOW}Credentials: Not set in environment${NC}"
    fi
}

# main function to manage AWS profiles
function _awsManager() {
    local usage
    usage="$(cat <<EOF
Usage: awsm [options]
    
Options:
    -la, --list-all             List all AWS credential profiles.
    -lp, --list-profile         List all AWS config profiles.
    -sp, --switch-profile       Switch to an AWS profile (with temp credentials).
    -s, --set, --set-profile    Set AWS_DEFAULT_PROFILE and AWS_PROFILE.
    -st, --status               Display current AWS profile status.
    -h, --help                  Show this help message.

Usage: awsm [-la | --list-all ] [-lp | --list-profile] [-sp | --switch-profile <profile>] 
       [-s | --set | --set-profile <profile>] [-st | --status] [-h | --help]

Examples:
    awsm -la
    awsm -lp
    awsm -sp my-profile
    awsm -s my-profile
    awsm -st
    awsm --help
EOF
    )"
    # if no arguments are provided, show help message
    if [[ $# -eq 0 ]]; then
        echo "$usage"
        return 1
    fi

    # parse options
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -la|--list-all)
                _awsListAll
                return 0
                ;;
            -lp|--list-profile)
                _awsListProfile
                return 0
                ;;
            -sp|--switch-profile)
                if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                    _awsSwitchProfile "$2"
                    shift
                else
                    echo "Error: Missing profile name after $1."
                    echo "$usage"
                    return 1
                fi
                ;;
            -s|--set|--set-profile)
                if [[ -n "$2" && ! "$2" =~ ^- ]]; then
                    _awsSetProfile "$2"
                    shift
                else
                    echo "Error: Missing profile name after $1."
                    echo "$usage"
                    return 1
                fi
                ;;
            -st|--status)
                _awsStatus
                ;;
            -h|--help)
                echo "$usage"
                ;;
            *)
                echo "Error: Unknown option '$1'."
                echo "$usage"
                return 1
                ;;
        esac
        shift
    done
    return 0
}

# register aliases
alias awsla="_awsListAll"
alias awslp="_awsListProfile"
alias awssp="_awsSwitchProfile"
alias awsset="_awsSetProfile"
alias awsst="_awsStatus"
alias awsm="_awsManager"
alias awsls="aws configure list"

function _awsCompletionList() {
    local credentials_file="${AWS_SHARED_CREDENTIALS_FILE:-$HOME/.aws/credentials}"
    local config_file="${AWS_CONFIG_FILE:-$HOME/.aws/config}"
    
    # use direct piping for efficiency
    {
        # get profiles from credentials file
        if [[ -f "$credentials_file" ]]; then
            grep -E '^\[.*\]' "$credentials_file" | sed -E 's/^\[(.*)\]$/\1/'
        fi
        
        # get profiles from config file
        if [[ -f "$config_file" ]]; then
            grep -E '^\[profile .*\]' "$config_file" | sed -E 's/^\[profile (.*)\]$/\1/'
            grep -E '^\[default\]' "$config_file" | sed -E 's/^\[(.*)\]$/\1/'
        fi
    } | sort -u
}

function _awsmCompletion() {
    local options="-la --list-all -lp --list-profile -sp --switch-profile -s --set --set-profile -st --status -h --help"
    local curw="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    if [[ $COMP_CWORD -eq 1 ]]; then
        COMPREPLY=($(compgen -W "$options" -- "$curw"))
        return 0
    fi

    case "$prev" in
        -sp|--switch-profile|-s|--set|--set-profile)
            local profiles
            profiles="$(_awsCompletionList)"
            COMPREPLY=($(compgen -W "$profiles" -- "$curw"))
            ;;
        *)
            COMPREPLY=($(compgen -W "$options" -- "$curw"))
            ;;
    esac
}

function _awsProfileCompletion() {
    local curw="${COMP_WORDS[COMP_CWORD]}"
    local profiles
    profiles="$(_awsCompletionList)"
    COMPREPLY=($(compgen -W "$profiles" -- "$curw"))
}

# register completions
complete -F _awsmCompletion awsm
complete -F _awsProfileCompletion awsla
complete -F _awsProfileCompletion awslp
complete -F _awsProfileCompletion awssp
complete -F _awsProfileCompletion awsset

# aws
# [[ -f "$HOME/.aws/.aws_helpers" ]] && source "$HOME/.aws/.aws_helpers"
# [[ -f "$AWS_HELPERS_DIR" ]] && source "$AWS_HELPERS_DIR"

## eof
